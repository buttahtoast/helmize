<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on Helmize</title><link>http://helmize.dev/usage/</link><description>Recent content in Usage on Helmize</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://helmize.dev/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Templating</title><link>http://helmize.dev/usage/templating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/templating/</guid><description>Files You can use templating in any file, with any extension. Helmize renders each file with sprigany validates, if it generates YAML output. You have access to the file contextwithin each file. Lets template! :)
Library Helmize comes with our helm library as dependency. The library provides a lot of functions which simplify the maniplution of dicts, slices, etc. You should definitly make use of it&amp;rsquo;s functionalities.</description></item><item><title>YAML</title><link>http://helmize.dev/usage/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/yaml/</guid><description>Example https://github.com/buttahtoast/helmize/tree/main/examples/example-yaml Multi YAML Helmize supports multi YAML files (Multiple YAMLs in one file separeted by - - -). The implementation is relativ primitive: If a file contains it&amp;rsquo;s split into multiple sub files, which then are treated as seperated files for further processing.
Limitation The fromYaml function can not parse multiple yaml files, but is aware of the delimiter. If you have the following example:
{{- define &amp;#34;sample.data&amp;#34; -}} --- First: YAML --- Second: YAML {{- end -}} {{- $t := (fromYaml (include &amp;#34;sample.</description></item><item><title>Data</title><link>http://helmize.dev/usage/data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/data/</guid><description>Example https://github.com/buttahtoast/helmize/tree/main/examples/data Data is shared over a specific field across all files. Data can originate from Conditionsor you can manipulate the data to a certain extend.
Manipulate With Data manipulation you can potentialy break the entire functionality. Make sure to only manipulate values under $.Data and be aware of what you are doing. You can manipulate data from files into the shared file store, since the set and unset execute on the interface and do not return a result.</description></item><item><title>Flags</title><link>http://helmize.dev/usage/flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/flags/</guid><description>Flags are given as values
Helmize File --set helmize_file=&amp;lt;string&amp;gt;
Define a custom location for the helmize configuraitonfile. The path is realtiv to the chart root directory.
helm template . --set helmize_file=custom.yaml Force --set helmize.force=&amp;lt;bool&amp;gt;
The Force flag is useful when you have errors while templating, but want to skip the errors:
Found errors, please resolve those errors or use the force option (--set helmize.</description></item></channel></rss>