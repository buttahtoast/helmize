<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Helmize</title><link>http://helmize.dev/</link><description>Recent content on Helmize</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://helmize.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Concept</title><link>http://helmize.dev/getting-started/concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/getting-started/concept/</guid><description>Inner Workings Helmize is included as library chart. It just has all the function it needs to render the structure you give it and then returns the resulting contents. So it&amp;rsquo;s basically just a render engine.
In the below image we have the Releases (which are effecitively values which install your helm chart). In your helm chart you see different yamls organized in a structure which depends on input conditions eg.</description></item><item><title>Fluxcd</title><link>http://helmize.dev/guides/fluxcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/guides/fluxcd/</guid><description>Helmize is a good match for Fluxcd. Especially when you start dealing with sub-dependencies. TBD</description></item><item><title>Helm</title><link>http://helmize.dev/guides/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/guides/helm/</guid><description>The ecosystem of helm already provides different plugins and solutions which can be used to implement more advanced concepts.
Post-Rendering Helm offers the option to embed your own post renderers. They allow to usage of other executables. In contrast, our post renderers are a bit simpler, but just scoped to the possibilities Srig itself has to offer. Read more:
https://helm.sh/docs/topics/advanced/#post-rendering Secrets Helm-Secretsis a great plugin which allows to encrypt helm secrets via sops.</description></item><item><title>Templating</title><link>http://helmize.dev/usage/templating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/templating/</guid><description>Files You can use templating in any file, with any extension. Helmize renders each file with sprigany validates, if it generates YAML output. You have access to the file contextwithin each file. Lets template! :)
Library Helmize comes with our helm library as dependency. The library provides a lot of functions which simplify the maniplution of dicts, slices, etc. You should definitly make use of it&amp;rsquo;s functionalities.</description></item><item><title>Conditions</title><link>http://helmize.dev/configuration/helmize/conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/configuration/helmize/conditions/</guid><description>Conditions translate into paths where files are looked up based on given values which are relevant for deployment. Conditions are declared as list, based on the order the files are looked up and merged.
Options Each condition can have the followin configurations.
name Required
Type string
Used across helmize to reference to condition.
key Optional
Type string</description></item><item><title>Quickstart</title><link>http://helmize.dev/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/getting-started/quickstart/</guid><description>If you encounter any problems during the quickstart make sure to use the flags. They help to understand what&amp;rsquo;s going on and what might be the problem.
https://github.com/buttahtoast/helmize/tree/main/examples/reference First we create a new helm chart which is going to contain the entire deployment structure for helmize. We can simply do that with the following comment (In this case I will call the new chart reference, chose the name you would like):</description></item><item><title>YAML</title><link>http://helmize.dev/usage/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/yaml/</guid><description>Example https://github.com/buttahtoast/helmize/tree/main/examples/example-yaml Multi YAML Helmize supports multi YAML files (Multiple YAMLs in one file separeted by - - -). The implementation is relativ primitive: If a file contains it&amp;rsquo;s split into multiple sub files, which then are treated as seperated files for further processing.
Limitation The fromYaml function can not parse multiple yaml files, but is aware of the delimiter. If you have the following example:
{{- define &amp;#34;sample.data&amp;#34; -}} --- First: YAML --- Second: YAML {{- end -}} {{- $t := (fromYaml (include &amp;#34;sample.</description></item><item><title>Custom Template</title><link>http://helmize.dev/usage/identifiers/custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/identifiers/custom/</guid><description>Example https://github.com/buttahtoast/helmize/tree/main/examples/example-customization You can implement your own identifier template, if ours is not practical for you. Let&amp;rsquo;s see how it&amp;rsquo;s done.
Configuration General configuration for Identifiers.
Assignment After the Identifier template is executed, the content in $.wagon.id is considered as the result of the template and is used for each file. Should the value of this field be unset or empty, the filename of the current executed file is used.</description></item><item><title>Custom Template</title><link>http://helmize.dev/usage/render/custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/render/custom/</guid><description>Example https://github.com/buttahtoast/helmize/tree/main/examples/example-customization You can implement your own render template. The render template constructs the output YAML when templating the entire structure.
Configuration General configuration for a Render Template.
Template Hereâ€™s a minimalstic Renderer Template to get started.
{{- define &amp;#34;render.template&amp;#34; -}} {{- range $wagon := $.train.wagons -}} {{/* Render Logic */}} {{/* Include Default Wagon Render Template (If you still want to use our template) */}} {{- include &amp;#34;helmize.</description></item><item><title>Data</title><link>http://helmize.dev/usage/data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/data/</guid><description>Example https://github.com/buttahtoast/helmize/tree/main/examples/data Data is shared over a specific field across all files. Data can originate from Conditionsor you can manipulate the data to a certain extend.
Manipulate With Data manipulation you can potentialy break the entire functionality. Make sure to only manipulate values under $.Data and be aware of what you are doing. You can manipulate data from files into the shared file store, since the set and unset execute on the interface and do not return a result.</description></item><item><title>Custom Renderers</title><link>http://helmize.dev/usage/renderers/custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/renderers/custom/</guid><description>Example https://github.com/buttahtoast/helmize/tree/main/examples/example-customization You can implement your own Renderer templates.
Configuration General configuration for Renderers.
Assignment Content is not returned via YAML but directly performed on the $.content map. Since map operations in sprig are directly performed on the given structure, it&amp;rsquo;s unessecary to abstract it via a return value. The below example implements functions of our library chart. The advantage of the library functions is they accept key paths and don&amp;rsquo;t fail if a child element does not exist.</description></item><item><title>Reference</title><link>http://helmize.dev/configuration/files/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/configuration/files/reference/</guid><description>Example configuration reference for files
## File Configuration Key # http://helmize.dev/configuration/helmize/#file_config_key helmize: ## Identifiers # http://helmize.dev/configuration/files/#id id: - deploy - nginx ## No Match # http://helmize.dev/configuration/files/#no_match no_match: &amp;#34;skip&amp;#34; ## Max Match # http://helmize.dev/configuration/files/#max_match no_match: 5 ## Render # http://helmize.dev/configuration/files/#render render: false ## Subpath # http://helmize.dev/configuration/files/#subpath subpath: false ## Pattern # http://helmize.dev/configuration/files/#pattern pattern: true ## Fork # http://helmize.dev/configuration/files/#fork fork: true</description></item><item><title>Reference</title><link>http://helmize.dev/configuration/helmize/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/configuration/helmize/reference/</guid><description>Example configuration reference with documentation links.
## Inventory Directory # http://helmize.dev/configuration/helmize/#inventory_directory inventory_directory: &amp;#34;groups/&amp;#34; ## Force # http://helmize.dev/configuration/helmize/#force force: false ## File Extensions # http://helmize.dev/configuration/helmize/#file_extensions file_extensions: [ &amp;#34;yaml&amp;#34; ] ## File Excludes # http://helmize.dev/configuration/helmize/#file_excludes file_excludes: [ &amp;#34;kustomization&amp;#34; ] ## Identifier Template # http://helmize.dev/configuration/helmize/#identifier_template identifier_template: &amp;#34;custom.identifier.template&amp;#34; ## Render Template # http://helmize.dev/configuration/helmize/#render_template render_template: &amp;#34;custom.render.template&amp;#34; ## File Configuration Key # http://helmize.dev/configuration/helmize/#file_config_key file_config_key: &amp;#34;custom.config.key&amp;#34; ## helmize Renderers # http://helmize.dev/configuration/helmize/#post_renderers renderers: - &amp;#34;custom.post-renderer.1&amp;#34; - &amp;#34;custom.post-renderer.2&amp;#34; ## Conditions # http://helmize.</description></item><item><title>Flags</title><link>http://helmize.dev/usage/flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/usage/flags/</guid><description>Flags are given as values
Helmize File --set helmize_file=&amp;lt;string&amp;gt;
Define a custom location for the helmize configuraitonfile. The path is realtiv to the chart root directory.
helm template . --set helmize_file=custom.yaml Force --set helmize.force=&amp;lt;bool&amp;gt;
The Force flag is useful when you have errors while templating, but want to skip the errors:
Found errors, please resolve those errors or use the force option (--set helmize.</description></item></channel></rss>