<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Helmize</title><link>http://helmize.dev/</link><description>Recent content on Helmize</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://helmize.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Concept</title><link>http://helmize.dev/getting-started/concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/getting-started/concept/</guid><description>Helmize is included as library chart. It just has all the function it needs to render the structure you give it and then returns the resulting contents. So it&amp;rsquo;s basically just a render engine.
In the below image we have the Releases (which are effecitively values which install your helm chart). In your helm chart you see different yamls organized in a structure which depends on input conditions eg. locations. Your chart includes a configuration filewhich defines these conditions and allows you to map it two values.</description></item><item><title>Files</title><link>http://helmize.dev/documentation/structure/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/structure/files/</guid><description>Context Within the Root context per File $ you can access the global Helm context, as usual.
Dropins In Files you can access the data from Dropins via $.Data. So if you configured a dropin like this:
helmize.yaml
... dropins: - patterns: [ &amp;#34;.*&amp;#34; ] data: elasticsearch: endpoint: &amp;#34;http://logging.company.com&amp;#34; port: 9200 You can access it in a file via:</description></item><item><title>Fluxcd</title><link>http://helmize.dev/guides/use/fluxcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/guides/use/fluxcd/</guid><description>Helmize is a perfect match for FluxcdBootstrap</description></item><item><title>General</title><link>http://helmize.dev/documentation/configuration/general/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/configuration/general/</guid><description>Configuration The following general configuration options are available in the helmize.yaml
conditions Required
Type slice
Read more about conditionsdropins Required
Type slice
Read more about dropinsinventory_directory Optional
Type string
Define a directory where the entire structure for helmize is located below. This path will be appended for all the condition&amp;rsquo;s paths.
templates_directory Optional</description></item><item><title>Identifiers</title><link>http://helmize.dev/documentation/structure/identifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/structure/identifier/</guid><description>Since Helmize supports multi YAML files each element within a file
Regardless if you are using the default identifier template or your own. If the template returns an empty ID the file name where the resource originate from is used. Should two resources from the same file use the file&amp;rsquo;s id it&amp;rsquo;s considered an error. Default Template Currently if a element has the field kind and metadata.</description></item><item><title>Labels</title><link>http://helmize.dev/documentation/post-renderers/built-in/labels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/post-renderers/built-in/labels/</guid><description>The Labels Post-Renderer allows to add Labels to all the files (if a metadata field is present, if not the labels won&amp;rsquo;t be added).
Labels can be set via `$.Values.
Example</description></item><item><title>Secrets</title><link>http://helmize.dev/guides/use/secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/guides/use/secrets/</guid><description>For secrets you should use
Other Solutions There are different Solutions which help you to organize your secrets in a safe way:
External Secrets SOPS Sealed Secrets</description></item><item><title>Bootstrap</title><link>http://helmize.dev/guides/fluxcd/bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/guides/fluxcd/bootstrap/</guid><description>The Example can be found here Now we bootstrap flux the helmize way.
Update</description></item><item><title>Conditions</title><link>http://helmize.dev/documentation/configuration/conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/configuration/conditions/</guid><description>Conditions translate into paths where files are looked up based on given values which are relevant for deployment. Conditions are declared as list, based on the order the files are looked up and merged.
Configuration Each condition can have the followin configurations.
name Required
Type string
Used across helmize to reference to condition.
key Optional
Type string
Path to the value in the user delivered values which is used as key to lookup.</description></item><item><title>Data Sharing</title><link>http://helmize.dev/documentation/structure/data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/structure/data/</guid><description/></item><item><title>Extend</title><link>http://helmize.dev/documentation/post-renderers/extend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/post-renderers/extend/</guid><description>You can add your own post renderers within your chart.
Let&amp;rsquo;s create a new renderer in the reference chart
Create Let&amp;rsquo;s create a new Post-Renderer which let&amp;rsquo;s us enable file contents via dropins.
we must create our Post-Renderer in the templatesdirectory of our chart.
mkdir -p templates/post-renders/ A Post-Renderer template is always expected to return a YAML with at least a content field
Then Let&amp;rsquo;s add this Template under templates/post-renders/_disabler.</description></item><item><title>Kustomization</title><link>http://helmize.dev/guides/use/kustomize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/guides/use/kustomize/</guid><description>Kustomize offers already a lot of post processing options through the kustomization file. We can simply use those capabilities.</description></item><item><title>Quickstart</title><link>http://helmize.dev/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/getting-started/quickstart/</guid><description>If you encounter any problems during the quickstart make sure to use the debug options. They help to understand what&amp;rsquo;s going on and what might be the problem. First we create a new helm chart which is going to contain the entire deployment structure for helmize. We can simply do that with the following comment (In this case I will call the new chart reference, chose the name you would like):</description></item><item><title>Dropins</title><link>http://helmize.dev/documentation/configuration/dropins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/configuration/dropins/</guid><description>Dropins are Values and templates which can be sustituted based on given path patterns. They allow greater customization through the use of sprig templates.
Configuration Each dropin can have the followin configurations.
patterns Required
Type string/slice
Define regex patterns which match file paths you want to supply this dropin to.
data Optional
Type map
Define data that will be available for the files that matched the pattern.</description></item><item><title>Reference</title><link>http://helmize.dev/documentation/configuration/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/documentation/configuration/reference/</guid><description>Example configuration reference with documentation links.
## Inventory Directory # http://helmize.dev/documentation/configuration/general/#inventory_directory inventory_directory: &amp;#34;groups/&amp;#34; ## Templates Directory # http://helmize.dev/documentation/configuration/general/#templates_directory templates_directory: &amp;#34;tpls/&amp;#34; ## Force # http://helmize.dev/documentation/configuration/general/#force force: false ## File Extensions # http://helmize.dev/documentation/configuration/general/#file_extensions file_extensions: [ &amp;#34;yaml&amp;#34; ] ## File Excludes # http://helmize.dev/documentation/configuration/general/#file_excludes file_excludes: [ &amp;#34;kustomization&amp;#34; ] ## Merge Strategy # http://helmize.dev/documentation/configuration/general/#merge_strategy merge_strategy: &amp;#34;path&amp;#34; ## Conditions # http://helmize.dev/documentation/configuration/conditions/ conditions: # Condition &amp;#34;Base&amp;#34; ## Name # http://helmize.dev/documentation/configuration/conditions/#name - name: &amp;#34;base&amp;#34; ## Path # http://helmize.dev/documentation/configuration/conditions/#path path: &amp;#34;/base/&amp;#34; ## Allow Root # http://helmize.</description></item><item><title/><link>http://helmize.dev/guides/fluxcd/chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://helmize.dev/guides/fluxcd/chart/</guid><description/></item></channel></rss>